--[[
Troop AI System (Refactored & Documented)
Handles merging, combat, movement, and capturing mechanics for troops.
--]]

local Players = game:GetService("Players")

-- CONSTANTS
local TROOPS_FOLDER = workspace:WaitForChild("Troops")
local WORLD_MAP = workspace:WaitForChild("World Map")

-- Utility Functions
local function isValidSoldier(soldier)
	return soldier and soldier:FindFirstChild("Owner") and soldier.Owner.Value ~= ""
end

local function getPlayerFromSoldier(soldier)
	return Players:FindFirstChild(soldier.Owner.Value)
end

local function isCommanderOfType(soldier, commanderType)
	local commanderFlag = soldier:FindFirstChild(commanderType)
	return commanderFlag and commanderFlag.Value == true
end

local function transferStats(fromSoldier, toSoldier)
	local fromHumanoid = fromSoldier:FindFirstChild("Humanoid")
	local toHumanoid = toSoldier:FindFirstChild("Humanoid")
	local fromDamage = fromSoldier:FindFirstChild("Damage")
	local toDamage = toSoldier:FindFirstChild("Damage")
	local toCount = toSoldier:FindFirstChild("NumberOfSoldiers")

	if fromHumanoid and toHumanoid then
		toHumanoid.MaxHealth += fromHumanoid.Health
		toHumanoid.Health += fromHumanoid.Health
	end

	if fromDamage and toDamage then
		toDamage.Value += fromDamage.Value
	end

	if toCount then
		toCount.Value += 1
	end

	fromSoldier:Destroy()
end

local function tryMergeSoldier(soldier, player, cityNameValue)
	local humanoid = soldier:FindFirstChild("Humanoid")
	if not humanoid or not soldier.PrimaryPart then return end

	for _, other in ipairs(TROOPS_FOLDER:GetChildren()) do
		if other.Name ~= soldier.Name and other:FindFirstChild("Owner") and other.Owner.Value == player.Name and
		   other:FindFirstChild("City Name") and other["City Name"].Value == cityNameValue.Value then

			local mergeType = isCommanderOfType(other, "DefendCommander") and "DefendCommander"
				or isCommanderOfType(other, "AttackCommander") and "AttackCommander" or nil

			if mergeType and other.PrimaryPart then
				local distance = (soldier.PrimaryPart.Position - other.PrimaryPart.Position).Magnitude
				if distance <= 3 then
					transferStats(soldier, other)
					break
				end
			end
		end
	end
end

local function getClosestEnemy(soldier, player, range)
	local closest, minDist = nil, range
	for _, enemy in ipairs(TROOPS_FOLDER:GetChildren()) do
		if enemy.Name ~= soldier.Name and enemy:FindFirstChild("Owner") and enemy.Owner.Value ~= player.Name then
			local eh = enemy:FindFirstChild("Humanoid")
			if eh and eh.Health > 0 and enemy.PrimaryPart then
				local dist = (soldier.PrimaryPart.Position - enemy.PrimaryPart.Position).Magnitude
				if dist < minDist then
					closest, minDist = enemy, dist
				end
			end
		end
	end
	return closest
end

local function setupDeathCleanup(soldier)
	local humanoid = soldier:FindFirstChild("Humanoid")
	if humanoid then
		humanoid.Died:Connect(function()
			soldier:Destroy()
		end)
	end
end

local function moveToWithRaycast(soldier, destination)
	local humanoid = soldier:FindFirstChild("Humanoid")
	if not humanoid or not soldier.PrimaryPart then return end

	local origin = soldier.PrimaryPart.Position + Vector3.new(0, -0.2, 0)
	local direction = (destination - origin).Unit

	local rayParams = RaycastParams.new()
	rayParams.IgnoreWater = true

	local ignoreList = { soldier }
	for _, d in ipairs(TROOPS_FOLDER:GetDescendants()) do
		table.insert(ignoreList, d)
	end

	rayParams.FilterDescendantsInstances = ignoreList
	local result = workspace:Raycast(origin, direction, rayParams)

	if result and result.Instance and result.Instance:IsA("BasePart") then
		local obstacle = result.Instance
		if obstacle.Size.Y > soldier.PrimaryPart.Size.Y then
			humanoid.Jump = true
		end
	end

	humanoid.WalkSpeed = 1
	humanoid:MoveTo(destination)
end

local function updateSoldierNameUI(soldier)
	local head = soldier:FindFirstChild("Head")
	local ui = head and head:FindFirstChild("NameUI")
	local count = soldier:FindFirstChild("NumberOfSoldiers")
	if ui and count then
		ui.Enabled = true
		ui.TextLabel.Text = "Soldiers: " .. count.Value
	end
end

local function returnToBaseOrCity(soldier, player, objectTarget)
	local target = WORLD_MAP:FindFirstChild(objectTarget.Value)
	if not target or not soldier.PrimaryPart then return end

	local dest = (target:FindFirstChild("Military") and target.Military.Position)
				or (target:FindFirstChild("City") and target.City.Position)
	if not dest then return end

	if (soldier.PrimaryPart.Position - dest).Magnitude > 2 then
		moveToWithRaycast(soldier, dest)
	else
		soldier.Humanoid:MoveTo(soldier.PrimaryPart.Position)
		soldier.Humanoid.WalkSpeed = 0
		print("Returned Home:", target.Name)
	end
end

local function captureTarget(soldier, player, target)
	if not target then return end

	local color = player.Power.SelectedColor.Value
	target.BrickColor = BrickColor.new(color)

	-- Update previous owner's stats
	local ownerVal = target:FindFirstChild("Owner")
	if ownerVal and ownerVal:IsA("StringValue") then
		local oldPlayer = Players:FindFirstChild(ownerVal.Value)
		if oldPlayer then
			for _, name in ipairs({"Fortress", "Military", "Factory"}) do
				if target:FindFirstChild(name) then
					local stat = oldPlayer.Power:FindFirstChild(name)
					if stat then stat.Value -= 1 end
				end
			end
		end
		ownerVal.Value = player.Name
	end

	-- Update new owner's stats
	for _, name in ipairs({"Fortress", "Military", "Factory"}) do
		if target:FindFirstChild(name) then
			player.Power[name].Value += 1
		end
	end

	print("Captured target:", target.Name)
	soldier:Destroy()
end

-- MAIN LOOP
while true do
	for _, soldier in ipairs(TROOPS_FOLDER:GetChildren()) do
		if isValidSoldier(soldier) then
			local player = getPlayerFromSoldier(soldier)
			if not player then continue end

			setupDeathCleanup(soldier)
			updateSoldierNameUI(soldier)

			local cityName = soldier:FindFirstChild("City Name")
			tryMergeSoldier(soldier, player, cityName)

			local status = soldier:FindFirstChild("Status")
			local objectTarget = soldier:FindFirstChild("ObjectTarget")
			local damage = soldier:FindFirstChild("Damage")
			local humanoid = soldier:FindFirstChild("Humanoid")

			if not status or not objectTarget or not damage or not humanoid then continue end

			if status.Value == "Defend" or status.Value == "Attack" then
				local enemy = getClosestEnemy(soldier, player, status.Value == "Defend" and 8 or 15)
				if enemy then
					local dist = (soldier.PrimaryPart.Position - enemy.PrimaryPart.Position).Magnitude
					if dist <= 2 then
						humanoid:MoveTo(soldier.PrimaryPart.Position)
						humanoid.WalkSpeed = 0
						local eh = enemy:FindFirstChild("Humanoid")
						if eh then
							eh:TakeDamage(damage.Value)
							task.wait(1)
						end
					else
						moveToWithRaycast(soldier, enemy.PrimaryPart.Position)
					end
				else
					if status.Value == "Defend" then
						returnToBaseOrCity(soldier, player, objectTarget)
					else
						local target = WORLD_MAP:FindFirstChild(objectTarget.Value)
						local dest = (target:FindFirstChild("City") and target.City.Position) or target.Position
						if (soldier.PrimaryPart.Position - dest).Magnitude > 2 then
							moveToWithRaycast(soldier, dest)
						else
							if target:FindFirstChild("Fortress") then task.wait(5) else task.wait(1) end
							captureTarget(soldier, player, target)
						end
					end
				end
			end
		end
	end
	task.wait()
end
