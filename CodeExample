local Players = game:GetService("Players")
local PathFindingService = game:GetService("PathfindingService")

local function MergeTroopsTogether(Soldier, Player, CityNameValue)
	local Humanoid = Soldier:FindFirstChild("Humanoid")
	for _, otherSoldier in pairs(game.Workspace.Troops:GetChildren()) do
		if otherSoldier.Name ~= Soldier.Name then
			if otherSoldier:FindFirstChild("Owner") and otherSoldier:FindFirstChild("Owner").Value == Player.Name then
				if otherSoldier:FindFirstChild("City Name") and otherSoldier:FindFirstChild("City Name").Value == CityNameValue.Value then
					if otherSoldier:FindFirstChild("DefendCommander") and otherSoldier.DefendCommander.Value == true then
						local otherHumanoid = otherSoldier:FindFirstChild("Humanoid")
						local otherDamage = otherSoldier:FindFirstChild("Damage")
						local CurrentDamage = Soldier:FindFirstChild("Damage")
						if Soldier and Soldier.PrimaryPart then
							local distanceToCommander = (Soldier.PrimaryPart.Position - otherSoldier.PrimaryPart.Position).Magnitude
							local NumberOfSoldiers = otherSoldier:FindFirstChild("NumberOfSoldiers")

							-- If the non-commander soldier is near the commander
							if distanceToCommander <= 3 then
								-- Transfer health to commander
								if otherHumanoid and Humanoid then
									otherHumanoid.MaxHealth = otherHumanoid.MaxHealth + Humanoid.Health
									otherHumanoid.Health = otherHumanoid.Health + Humanoid.Health
								end

								if otherDamage and CurrentDamage then
									otherDamage.Value += CurrentDamage.Value
								end

								if NumberOfSoldiers then
									NumberOfSoldiers.Value += 1
								end
								-- Remove the non-commander soldier
								Soldier:Destroy()
								break
							end
						end
					elseif otherSoldier:FindFirstChild("AttackCommander") and otherSoldier.AttackCommander.Value == true then
						local otherHumanoid = otherSoldier:FindFirstChild("Humanoid")
						local otherDamage = otherSoldier:FindFirstChild("Damage")
						local CurrentDamage = Soldier:FindFirstChild("Damage")
						if Soldier and Soldier.PrimaryPart then
							local distanceToCommander = (Soldier.PrimaryPart.Position - otherSoldier.PrimaryPart.Position).Magnitude
							local NumberOfSoldiers = otherSoldier:FindFirstChild("NumberOfSoldiers")

							-- If the non-commander soldier is near the commander
							if distanceToCommander <= 3 then
								-- Transfer health to commander
								if otherHumanoid and Humanoid then
									otherHumanoid.MaxHealth = otherHumanoid.MaxHealth + Humanoid.Health
									otherHumanoid.Health = otherHumanoid.Health + Humanoid.Health
								end

								if otherDamage and CurrentDamage then
									otherDamage.Value += CurrentDamage.Value
								end

								if NumberOfSoldiers then
									NumberOfSoldiers.Value += 1
								end
								-- Remove the non-commander soldier
								Soldier:Destroy()
								break
							end
						end
					end
				end
			end
		end
	end
end

while true do
	for i, soldier in pairs(game.Workspace.Troops:GetChildren()) do
		if soldier then
			if soldier:FindFirstChild("Owner") and soldier.Owner.Value ~= "" then
				local Player = Players:FindFirstChild(soldier.Owner.Value)
				if soldier.Owner.Value == Player.Name then
					local CityName = soldier:FindFirstChild("City Name")
					local AttackCommander = soldier:FindFirstChild("AttackCommander")
					local DefendCommander = soldier:FindFirstChild("DefendCommander")
					local ObjectTarget = soldier:FindFirstChild("ObjectTarget")
					local Status = soldier:FindFirstChild("Status")
					local Damage = soldier:FindFirstChild("Damage")
					local NumberOfSoldiers = soldier:FindFirstChild("NumberOfSoldiers")

					local Humanoid = soldier:FindFirstChild("Humanoid")
					local connection
					connection = Humanoid.Died:Connect(function()
						soldier:Destroy()
						connection:Disconnect() -- Clean up the connection
						print("DISSCONNECTED")
					end)

					local Head = soldier:FindFirstChild("Head")
					local NameUI = Head:FindFirstChild("NameUI")

					MergeTroopsTogether(soldier, Player, CityName)
					
					if AttackCommander and AttackCommander.Value == true then
						NameUI.Enabled = true
						NameUI.TextLabel.Text = "Soldiers: "..NumberOfSoldiers.Value
					elseif DefendCommander and DefendCommander.Value == true then
						NameUI.Enabled = true
						NameUI.TextLabel.Text = "Soldiers: "..NumberOfSoldiers.Value
					end
					
					if Status.Value == "Defend" then
						local closestEnemyAI = nil
						local closestDistance = 8

						for _, EnemyAI in pairs(game.Workspace.Troops:GetChildren()) do
							if EnemyAI.Name ~= soldier.Name and soldier and soldier.PrimaryPart then
								if EnemyAI:FindFirstChild("Owner") and EnemyAI.Owner.Value ~= Player.Name then
									local EnemyHumanoid = EnemyAI:FindFirstChild("Humanoid")
									if EnemyHumanoid and EnemyHumanoid.Health > 0 then
										local distance = (soldier.PrimaryPart.Position - EnemyAI.PrimaryPart.Position).Magnitude
										if distance < closestDistance then
											closestDistance = distance
											closestEnemyAI = EnemyAI
										end
									end
								end
							end
						end

						if closestEnemyAI then
							local EnemyHumanoid = closestEnemyAI:FindFirstChild("Humanoid")
							local distanceToEnemyAI = (soldier.PrimaryPart.Position - closestEnemyAI.PrimaryPart.Position).Magnitude
							if distanceToEnemyAI <= 2 then
								-- Close enough to attack NPC
								Humanoid:MoveTo(soldier.PrimaryPart.Position) -- Stop soldier's movement
								Humanoid.WalkSpeed = 0

								-- Attack EnemyAI
								if EnemyHumanoid and EnemyHumanoid.Health > 0 then
									EnemyHumanoid:TakeDamage(Damage.Value)
									task.wait(1) -- Attack CoolDown
								end
							else
								-- Move toward Enemy
								if Humanoid.WalkSpeed > 0 then -- Only run raycast if soldier is moving
									local rayOrigin = soldier.PrimaryPart.Position + Vector3.new(0, -0.2, 0)
									local direction = (closestEnemyAI.PrimaryPart.Position - rayOrigin).Unit * 1

									local raycastParams = RaycastParams.new()
									raycastParams.IgnoreWater = true

									local ignoreList = {soldier}
									local troopsFolder = workspace:FindFirstChild("Troops")

									if troopsFolder then
										for _, descendant in ipairs(troopsFolder:GetDescendants()) do
											table.insert(ignoreList, descendant)
										end
									end

									raycastParams.FilterDescendantsInstances = ignoreList

									local result = workspace:Raycast(rayOrigin, direction, raycastParams)

									if result then
										local hitPart = result.Instance
										if hitPart and (hitPart:IsA("BasePart") or hitPart:IsA("UnionOperation")) then
											print("Ray hit:", hitPart:GetFullName())

											local obstacleHeight = hitPart.Size.Y
											local soldierHeight = soldier.PrimaryPart.Size.Y

											if obstacleHeight > soldierHeight then
												Humanoid.Jump = true
											end
										end
									else
										print("Ray hit nothing.")
									end
								end

								Humanoid.WalkSpeed = 1
								Humanoid:MoveTo(closestEnemyAI.PrimaryPart.Position)
							end
						else
							--No enemies, move back to Military Base Or City

							local Target = game.Workspace["World Map"]:FindFirstChild(ObjectTarget.Value)
							local destination = Target:FindFirstChild("Military") and Target.Military.Position or Target:FindFirstChild("City") and Target.City.Position
							if soldier and soldier.PrimaryPart then
								local distanceToDestination = (soldier.PrimaryPart.Position - destination).Magnitude

								if distanceToDestination > 2 then
									if Humanoid.WalkSpeed > 0  then -- Only run raycast if soldier is moving
										local rayOrigin = soldier.PrimaryPart.Position + Vector3.new(0, -0.2, 0)
										local direction = (destination - rayOrigin).Unit * 1

										local raycastParams = RaycastParams.new()
										raycastParams.IgnoreWater = true

										local ignoreList = {soldier}
										local troopsFolder = workspace:FindFirstChild("Troops")

										if troopsFolder then
											for _, descendant in ipairs(troopsFolder:GetDescendants()) do
												table.insert(ignoreList, descendant)
											end
										end

										raycastParams.FilterDescendantsInstances = ignoreList

										local result = workspace:Raycast(rayOrigin, direction, raycastParams)

										if result then
											local hitPart = result.Instance
											if hitPart and (hitPart:IsA("BasePart") or hitPart:IsA("UnionOperation")) then
												print("Ray hit:", hitPart:GetFullName())

												local obstacleHeight = hitPart.Size.Y
												local soldierHeight = soldier.PrimaryPart.Size.Y

												if obstacleHeight > soldierHeight then
													Humanoid.Jump = true
												end
											end
										else
											print("Ray hit nothing.")
										end
									end
									-- Move back to the Military Base or City
									Humanoid.WalkSpeed = 1
									Humanoid:MoveTo(destination)
								else
									-- Soldier reached military base or city, continue defending
									Humanoid:MoveTo(soldier.PrimaryPart.Position) -- Stop movement
									Humanoid.WalkSpeed = 0
									print("Returned Home:", Target.Name)
								end
							end

						end
					end					
					
					if Status.Value == "Attack" then
						local closestEnemyAI = nil
						local closestDistance = 15
						

						--Find nearby enemy NPCs
						for _, npc in pairs(game.Workspace.Troops:GetChildren()) do
							if npc.Name ~= soldier.Name and npc:FindFirstChild("Owner") and npc.Owner.Value ~= Player.Name then
								local npcHumanoid = npc:FindFirstChild("Humanoid")
								if npcHumanoid and npcHumanoid.Health > 0 then
									if soldier and soldier.PrimaryPart and soldier.Parent == game.Workspace.Troops then
										local distance = (soldier.PrimaryPart.Position - npc.PrimaryPart.Position).Magnitude
										if distance < closestDistance then
											closestDistance = distance
											closestEnemyAI = npc
										end
									end
								end
							end
						end
						
						
						if closestEnemyAI then
							local EnemyHumanoid = closestEnemyAI:FindFirstChild("Humanoid")
							local distanceToEnemyAI = (soldier.PrimaryPart.Position - closestEnemyAI.PrimaryPart.Position).Magnitude
							if distanceToEnemyAI <= 2 then
								-- Close enough to attack NPC
								Humanoid:MoveTo(soldier.PrimaryPart.Position) -- Stop soldier's movement
								Humanoid.WalkSpeed = 0

								-- Attack EnemyAI
								if EnemyHumanoid and EnemyHumanoid.Health > 0 then
									EnemyHumanoid:TakeDamage(Damage.Value)
									task.wait(1) -- Attack CoolDown
								end
							else
								-- Move toward Enemy
								if Humanoid.WalkSpeed > 0 then -- Only run raycast if soldier is moving
									local rayOrigin = soldier.PrimaryPart.Position + Vector3.new(0, -0.2, 0)
									local direction = (closestEnemyAI.PrimaryPart.Position - rayOrigin).Unit * 1

									local raycastParams = RaycastParams.new()
									raycastParams.IgnoreWater = true

									local ignoreList = {soldier}
									local troopsFolder = workspace:FindFirstChild("Troops")

									if troopsFolder then
										for _, descendant in ipairs(troopsFolder:GetDescendants()) do
											table.insert(ignoreList, descendant)
										end
									end

									raycastParams.FilterDescendantsInstances = ignoreList

									local result = workspace:Raycast(rayOrigin, direction, raycastParams)

									if result then
										local hitPart = result.Instance
										if hitPart and (hitPart:IsA("BasePart") or hitPart:IsA("UnionOperation")) then
											print("Ray hit:", hitPart:GetFullName())

											local obstacleHeight = hitPart.Size.Y
											local soldierHeight = soldier.PrimaryPart.Size.Y

											if obstacleHeight > soldierHeight then
												Humanoid.Jump = true
											end
										end
									else
										print("Ray hit nothing.")
									end
								end

								Humanoid.WalkSpeed = 1
								Humanoid:MoveTo(closestEnemyAI.PrimaryPart.Position)
							end
						else
							
							local Target = game.Workspace["World Map"]:FindFirstChild(ObjectTarget.Value)
							local destination = Target:FindFirstChild("City") and Target.City.Position or Target.Position
							
							if soldier and soldier.PrimaryPart then
								local distanceToDestination = (soldier.PrimaryPart.Position - destination).Magnitude
								
								if distanceToDestination > 2 then
									if Humanoid.WalkSpeed > 0 then -- Only run raycast if soldier is moving
										local rayOrigin = soldier.PrimaryPart.Position + Vector3.new(0, -0.2, 0)
										local direction = (destination - rayOrigin).Unit * 1

										local raycastParams = RaycastParams.new()
										raycastParams.IgnoreWater = true

										local ignoreList = {soldier}
										local troopsFolder = workspace:FindFirstChild("Troops")

										if troopsFolder then
											for _, descendant in ipairs(troopsFolder:GetDescendants()) do
												table.insert(ignoreList, descendant)
											end
										end

										raycastParams.FilterDescendantsInstances = ignoreList

										local result = workspace:Raycast(rayOrigin, direction, raycastParams)

										if result then
											local hitPart = result.Instance
											if hitPart and (hitPart:IsA("BasePart") or hitPart:IsA("UnionOperation")) then
												print("Ray hit:", hitPart:GetFullName())

												local obstacleHeight = hitPart.Size.Y
												local soldierHeight = soldier.PrimaryPart.Size.Y

												if obstacleHeight > soldierHeight then
													Humanoid.Jump = true
												end
											end
										else
											print("Ray hit nothing.")
										end
									end
									
									Humanoid.WalkSpeed = 1
									Humanoid:MoveTo(destination)
								else
									---Capture
									Humanoid:MoveTo(soldier.PrimaryPart.Position) -- Stop movement
									Humanoid.WalkSpeed = 0

									if Target:FindFirstChild("Fortress") then
										task.wait(5)
									else
										task.wait(1)
									end
									-- Set new owner and color
									local color = Player.Power.SelectedColor.Value
									Target.BrickColor = BrickColor.new(color)

									local ownerValue = Target:FindFirstChild("Owner")
									if ownerValue and ownerValue:IsA("StringValue") then
										local OldOwner = game.Players:FindFirstChild(ownerValue.Value)
										if OldOwner then
											local Power = OldOwner:FindFirstChild("Power")
											local Fortress = Power:FindFirstChild("Fortress")
											local Military = Power:FindFirstChild("Military")
											local Factory = Power:FindFirstChild("Factory")
											if Target:FindFirstChild("Fortress") then
												Fortress.Value -= 1
											end
											if Target:FindFirstChild("Military") then
												Military.Value -= 1
											end
											if Target:FindFirstChild("Factory") then
												Factory.Value -= 1
											end
										end
										ownerValue.Value = Player.Name
									end

									local Fortress = Target:FindFirstChild("Fortress")
									local Military = Target:FindFirstChild("Military")
									local Factory = Target:FindFirstChild("Factory") 
									if Fortress then
										Player.Power.Fortress.Value += 1
									end

									if Military then
										Player.Power.Military.Value += 1
									end

									if Factory then
										Player.Power.Factory.Value += 1
									end

									print("Captured target:", Target.Name)

									soldier:Destroy()
								end
							end
						end
					end
					
				end
			end
		end
	end
	task.wait()
end
